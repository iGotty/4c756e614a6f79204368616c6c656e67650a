name: Deploy Backend API to Azure

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/deploy-backend.yml'
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: 'lunajoy-backend-api' 
  PYTHON_VERSION: '3.11'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    # Setup Python
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        
        # Crear requirements.txt limpio (sin Windows packages)
        echo "üì¶ Creating clean requirements.txt"
        grep -v "pywin32" requirements.txt > requirements-clean.txt || cp requirements.txt requirements-clean.txt
        
        # Instalar dependencias
        pip install -r requirements-clean.txt
        cd ..
        
    # Verify data files exist
    - name: Verify data files
      run: |
        echo "üìÅ Checking for data files..."
        if [ -d "backend/data" ]; then
          echo "‚úÖ Data directory found in backend/"
          ls -la backend/data/
        elif [ -d "data" ]; then
          echo "üìÅ Data directory found in root, copying to backend/"
          cp -r data backend/
          ls -la backend/data/
        else
          echo "‚ö†Ô∏è No data directory found! Creating sample data..."
          mkdir -p backend/data
          # Aqu√≠ podr√≠as crear archivos de datos de ejemplo si es necesario
        fi
        
    # Create startup.txt
    - name: Create startup configuration
      run: |
        cd backend
        echo "gunicorn --bind=0.0.0.0:8000 --timeout 600 --access-logfile '-' --error-logfile '-' --workers 4 --worker-class uvicorn.workers.UvicornWorker main:app" > startup.txt
        echo "‚úÖ Created startup.txt"
        cd ..
        
    # Create deployment package
    - name: Create deployment package
      run: |
        cd backend
        
        # List contents for debugging
        echo "üìã Backend directory contents:"
        ls -la
        
        # Create zip excluding unnecessary files
        zip -r ../deploy.zip . \
          -x "*.pyc" \
          -x "__pycache__/*" \
          -x "venv/*" \
          -x ".git/*" \
          -x "*.db" \
          -x ".env*" \
          -x ".pytest_cache/*" \
          -x "tests/*" \
          -x "static/*" \
          -x "node_modules/*" \
          -x ".vscode/*"
          
        cd ..
        
        # Show package info
        echo "üì¶ Deployment package created:"
        ls -lh deploy.zip
        
    # Deploy to Azure
    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_BACKEND }}
        package: ./deploy.zip
        
    # Verify deployment
    - name: Verify deployment
      run: |
        echo "‚è≥ Waiting for deployment to stabilize..."
        sleep 30
        
        echo "üîç Checking health endpoint..."
        response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/health)
        
        if [ $response -eq 200 ]; then
          echo "‚úÖ Backend is healthy!"
          echo "üìö API Docs: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/docs"
        else
          echo "‚ùå Health check failed with status: $response"
          exit 1
        fi